// SPDX-License-Identifier:GPL-30 

pragma solidity >= 0.7.0 < 0.9.0; 

// Solidity의 배열은 값을 꺼내도 인덱스와 값이 한 칸씩 앞으로 이동하는게 아니라 그 자리 그대로 남아있음
contract lec18 { 

    uint256[] public ageArray; //uint256 크기의 ageArray 이름을 가진 배열 선언 

    // view는 public과 같은 접근제한자 앞이나 뒤 어디든 붙이기 가능 
    // view는 storage state를 읽을 수 있지만 state 값 변경 불가능 
    // 위에서 ageArray의 length를 리턴하므로 당연히 storage state를 읽은 것이다. 그렇기 때문에 view를 넣어줘야 한다. 
    // 만약에 AgeLength에서 storage state를 바꾼다면 어떻게 될까? view 말고 아무것도 안써주면 된다 >> pure  
    function AgeLength() public view returns(uint256) { 
        return ageArray.length; 
    }


    // 나이 넣기 
    // 0->50 / 1->70/ Length:2 
    function AgePush(uint256 _age)public{ 
        ageArray.push(_age);
    }

    function AgeGet(uint256 _index)public view returns(uint256){
        return ageArray[_index];
    }

    // pop은 맨 위의 값을 꺼내 오는 것이므로 최신의 값을 삭제함. 배열 크기는 안줄어들음 
    function AgePop() public { 
        ageArray.pop();
    }

    function AgeDelete(uint256 _index)public { 
        delete ageArray[_index];
    }

    // 나이를 바꾸려면 인덱스 번호와 나이 필요 
    function AgeChange(uint256 _index, uint256 _age) public {
        ageArray[_index]=_age;
    }
  
}

